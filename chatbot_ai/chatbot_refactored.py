import os
import json
import re
import time
import hashlib
import threading
from datetime import datetime
from typing import Dict, List, Optional, Tuple

import numpy as np
import requests
import faiss
from sentence_transformers import SentenceTransformer
import unicodedata
import colorama
from colorama import Fore, Style

# Initialize colorama on all platforms
colorama.init(autoreset=True)

# Project paths
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_FILE = os.path.join(BASE_DIR, "data_chatbot.json")
VUE_DATA_FILE = os.path.join(BASE_DIR, "data_nganh_vue.json")
EMBEDDING_FILE = os.path.join(BASE_DIR, "nganh_embeddings.npy")
INDEX_FILE = os.path.join(BASE_DIR, "nganh_faiss.index")
ID_FILE = os.path.join(BASE_DIR, "nganh_ids.json")
CACHE_META_FILE = os.path.join(BASE_DIR, "nganh_cache_meta.json")
CHAT_HISTORY_FILE = os.path.join(BASE_DIR, "chat_sessions.json")

# Models and RAG
MODEL_NAME = "sentence-transformers/all-MiniLM-L6-v2"
TOP_K = 5
MIN_SIMILARITY_SCORE = 0.4
LLM_TIMEOUT = 60
MAX_HISTORY_LENGTH = 15

# Improved alias map
ALIAS_MAP: Dict[str, str] = {
    # CNTT
    'cntt': '7480201', 'it': '7480201', 'cong nghe thong tin': '7480201',
    'information technology': '7480201', 'tin hoc': '7480201', 'c.n.t.t': '7480201',
    'c√¥ng ngh·ªá th√¥ng tin': '7480201', 'it major': '7480201', 'it engineer': '7480201',
    'it ct': '7480201', 'it ctu': '7480201', 'itctu': '7480201',
    # H·ªá th·ªëng th√¥ng tin
    'htt': '7480104', 'he thong thong tin': '7480104', 'information systems': '7480104',
    'h·ªá th·ªëng th√¥ng tin': '7480104', 'is': '7480104', 'is major': '7480104',
    # KHMT
    'khmt': '7480101', 'khoa hoc may tinh': '7480101', 'computer science': '7480101',
    'cs': '7480101', 'lap trinh': '7480101', 'programming': '7480101',
    'khoa h·ªçc m√°y t√≠nh': '7480101', 'cs major': '7480101',
    # KTPM
    'ktpm': '7480103', 'ky thuat phan mem': '7480103', 'software engineering': '7480103',
    'se': '7480103', 'phan mem': '7480103', 'k·ªπ thu·∫≠t ph·∫ßn m·ªÅm': '7480103',
    'software': '7480103', 'software dev': '7480103',
    # MMT
    'mmt': '7480102', 'mang may tinh': '7480102', 'network': '7480102',
    'mang': '7480102', 'computer network': '7480102', 'm·∫°ng m√°y t√≠nh': '7480102',
    'networking': '7480102', 'network engineer': '7480102',
    # TTNT
    'ttnt': '7480107', 'tri tue nhan tao': '7480107', 'artificial intelligence': '7480107',
    'ai': '7480107', 'machine learning': '7480107', 'ml': '7480107', 'ai major': '7480107',
    'tr√≠ tu·ªá nh√¢n t·∫°o': '7480107',
    # An to√†n th√¥ng tin
    'attt': '7480202', 'an toan thong tin': '7480202', 'information security': '7480202',
    'an to√†n th√¥ng tin': '7480202', 'security': '7480202', 'cyber security': '7480202',
    'infosec': '7480202',
    # Kinh t·∫ø
    'kinh te': '7310101', 'economics': '7310101', 'kinh t·∫ø': '7310101', 'eco': '7310101',
    # K·∫ø to√°n
    'ke toan': '7340301', 'accounting': '7340301', 'k·∫ø to√°n': '7340301', 'kt': '7340301',
    # Qu·∫£n tr·ªã kinh doanh
    'quan tri kinh doanh': '7340101', 'business': '7340101', 'business administration': '7340101',
    'qtkd': '7340101', 'qu·∫£n tr·ªã kinh doanh': '7340101', 'ba': '7340101',
    # Marketing
    'marketing': '7340115', 'ti·∫øp th·ªã': '7340115', 'marketing major': '7340115',
}


class ColoredOutput:
    @staticmethod
    def print_header(text: str) -> None:
        print(f"\n{Fore.CYAN}{Style.BRIGHT}{'='*60}\n{text}\n{'='*60}{Style.RESET_ALL}")

    @staticmethod
    def print_bot_response(text: str) -> None:
        print(f"\n{Fore.GREEN}ü§ñ {text}{Style.RESET_ALL}")

    @staticmethod
    def print_error(text: str) -> None:
        print(f"\n{Fore.RED}‚ùå {text}{Style.RESET_ALL}")

    @staticmethod
    def print_warning(text: str) -> None:
        print(f"\n{Fore.YELLOW}‚ö†Ô∏è  {text}{Style.RESET_ALL}")

    @staticmethod
    def print_info(text: str) -> None:
        print(f"\n{Fore.BLUE}‚ÑπÔ∏è  {text}{Style.RESET_ALL}")

    @staticmethod
    def print_success(text: str) -> None:
        print(f"\n{Fore.GREEN}‚úÖ {text}{Style.RESET_ALL}")


class ChatbotMemory:
    def __init__(self) -> None:
        self.current_session: List[Dict] = []
        self.user_preferences: Dict = {}
        self.conversation_context: Dict = {}
        self.last_nganh_context: Optional[Dict] = None

    def add_turn(self, question: str, answer: str, metadata: dict = None) -> None:
        turn = {
            "timestamp": datetime.now().isoformat(),
            "question": question,
            "answer": answer,
            "metadata": metadata or {}
        }
        self.current_session.append(turn)
        if len(self.current_session) > MAX_HISTORY_LENGTH:
            self.current_session = self.current_session[-MAX_HISTORY_LENGTH:]

    def get_context_for_llm(self) -> List[Dict]:
        return self.current_session[-5:] if self.current_session else []

    def save_session(self) -> None:
        try:
            sessions: List[Dict] = []
            if os.path.exists(CHAT_HISTORY_FILE):
                with open(CHAT_HISTORY_FILE, 'r', encoding='utf-8') as f:
                    sessions = json.load(f)
            if self.current_session:
                sessions.append({
                    "session_id": datetime.now().strftime("%Y%m%d_%H%M%S"),
                    "turns": self.current_session
                })
            sessions = sessions[-10:]
            with open(CHAT_HISTORY_FILE, 'w', encoding='utf-8') as f:
                json.dump(sessions, f, ensure_ascii=False, indent=2)
        except Exception as e:
            ColoredOutput.print_warning(f"Kh√¥ng th·ªÉ l∆∞u l·ªãch s·ª≠ chat: {e}")

    def reset_session(self) -> None:
        self.current_session = []
        self.conversation_context = {}
        self.last_nganh_context = None


class SmartMatcher:
    @staticmethod
    def remove_accents(text: str) -> str:
        if not text:
            return ""
        nfkd_form = unicodedata.normalize('NFKD', text)
        return ''.join([c for c in nfkd_form if not unicodedata.combining(c)]).lower()

    @staticmethod
    def extract_year(text: str) -> Optional[str]:
        patterns = [r'nƒÉm\s*(20\d{2})', r'(20\d{2})', r'nƒÉm\s*(\d{2})']
        for pattern in patterns:
            match = re.search(pattern, text.lower())
            if match:
                year = match.group(1)
                if len(year) == 2:
                    year = "20" + year
                return year
        return None

    @staticmethod
    def extract_year_range(text: str) -> Optional[Tuple[str, str]]:
        text_l = text.lower()
        patterns = [
            r't·ª´\s*(20\d{2})\s*ƒë·∫øn\s*(20\d{2})',
            r'giai\s*ƒëo·∫°n\s*(20\d{2})\s*(?:ƒë·∫øn|-|‚Äì)\s*(20\d{2})',
            r'(20\d{2})\s*(?:-|‚Äì|ƒë·∫øn)\s*(20\d{2})',
        ]
        for pattern in patterns:
            m = re.search(pattern, text_l)
            if m:
                start, end = m.group(1), m.group(2)
                if start > end:
                    start, end = end, start
                return start, end
        return None

    @staticmethod
    def extract_score_range(text: str) -> Tuple[Optional[float], Optional[float]]:
        patterns = [
            r't·ª´\s*([\d.]+)\s*ƒë·∫øn\s*([\d.]+)',
            r'tr√™n\s*([\d.]+)',
            r'd∆∞·ªõi\s*([\d.]+)',
            r'>\s*([\d.]+)',
            r'<\s*([\d.]+)',
        ]
        text_l = text.lower()
        for pattern in patterns:
            match = re.search(pattern, text_l)
            if match:
                if pattern.startswith('t·ª´'):
                    return float(match.group(1)), float(match.group(2))
                if 'tr√™n' in pattern or '>' in pattern:
                    return float(match.group(1)), None
                if 'd∆∞·ªõi' in pattern or '<' in pattern:
                    return None, float(match.group(1))
        return None, None

    @staticmethod
    def extract_admission_method(text: str) -> Optional[str]:
        text_lower = text.lower()
        method_keywords = {
            "ƒëi·ªÉm thi thpt": ["ƒëi·ªÉm thi thpt", "ƒëi·ªÉm thi t·ªët nghi·ªáp", "ƒëi·ªÉm thi ƒë·∫°i h·ªçc"],
            "h·ªçc b·∫°": ["h·ªçc b·∫°", "x√©t h·ªçc b·∫°", "ƒëi·ªÉm h·ªçc b·∫°"],
            "k·∫øt h·ª£p": ["k·∫øt h·ª£p", "t·ªï h·ª£p", "ƒëi·ªÉm k·∫øt h·ª£p"],
            "x√©t tuy·ªÉn th·∫≥ng": ["x√©t tuy·ªÉn th·∫≥ng", "tuy·ªÉn th·∫≥ng", "∆∞u ti√™n x√©t tuy·ªÉn"],
            "ph·ªèng v·∫•n": ["ph·ªèng v·∫•n", "v·∫•n ƒë√°p", "interview"],
        }
        for method, keywords in method_keywords.items():
            if any(kw in text_lower for kw in keywords):
                return method
        return None

    @staticmethod
    def filter_by_admission_method(diem_chuan_list: List[Dict], method: str) -> List[Dict]:
        if not method:
            return diem_chuan_list
        filtered: List[Dict] = []
        for dc in diem_chuan_list:
            phuong_thuc = str(dc.get('phuong_thuc', '')).lower()
            if method == "ƒëi·ªÉm thi thpt":
                if any(kw in phuong_thuc for kw in ["ƒëi·ªÉm thi t·ªët nghi·ªáp thpt", "x√©t ƒëi·ªÉm thi t·ªët nghi·ªáp thpt", "ƒëi·ªÉm thi thpt"]):
                    filtered.append(dc)
            elif method == "h·ªçc b·∫°":
                if any(kw in phuong_thuc for kw in ["h·ªçc b·∫° thpt", "x√©t h·ªçc b·∫° thpt", "h·ªçc b·∫°"]):
                    filtered.append(dc)
            elif method == "k·∫øt h·ª£p":
                if any(kw in phuong_thuc for kw in ["k·∫øt h·ª£p", "t·ªï h·ª£p"]):
                    filtered.append(dc)
            elif method == "x√©t tuy·ªÉn th·∫≥ng":
                if any(kw in phuong_thuc for kw in ["tuy·ªÉn th·∫≥ng", "∆∞u ti√™n"]):
                    filtered.append(dc)
        return filtered


class ImprovedChatbot:
    def __init__(self) -> None:
        self.model: Optional[SentenceTransformer] = None
        self.nganhs: List[Dict] = []
        self.vue_nganh_map: Dict[str, Dict] = {}
        self.embeddings: Optional[np.ndarray] = None
        self.index: Optional[faiss.Index] = None
        self.ids: List[int] = []
        self.memory = ChatbotMemory()
        self.is_loading = False
        self.last_question: Optional[str] = None

    # -------------------- Data Loading --------------------
    def load_data(self) -> bool:
        if not os.path.exists(DATA_FILE):
            ColoredOutput.print_error(f"File d·ªØ li·ªáu {DATA_FILE} kh√¥ng t·ªìn t·∫°i!")
            return False
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
            self.nganhs = data.get('nganhs', [])
            ColoredOutput.print_success(f"ƒê√£ load {len(self.nganhs)} ng√†nh h·ªçc t·ª´ {os.path.basename(DATA_FILE)}")
        except Exception as e:
            ColoredOutput.print_error(f"L·ªói khi load d·ªØ li·ªáu: {e}")
            return False
        # Merge t·ª´ Vue (n·∫øu c√≥)
        if os.path.exists(VUE_DATA_FILE):
            try:
                with open(VUE_DATA_FILE, 'r', encoding='utf-8') as f:
                    vue_data = json.load(f)
                self.vue_nganh_map = {}
                for item in vue_data:
                    ma_nganh = item.get('maNganh') or item.get('ma_nganh')
                    if ma_nganh:
                        self.vue_nganh_map[ma_nganh] = item
                for ng in self.nganhs:
                    ma_nganh = ng.get('ma_nganh')
                    vue_info = self.vue_nganh_map.get(ma_nganh)
                    if vue_info:
                        for key in ['gioiThieu', 'viTriViecLam', 'noiLamViec', 'thoiGianDaoTao', 'bangCap', 'khoa', 'phuongThucXetTuyen']:
                            if key in vue_info:
                                ng[key] = vue_info[key]
                ColoredOutput.print_success(f"ƒê√£ merge d·ªØ li·ªáu m√¥ t·∫£ ng√†nh t·ª´ {os.path.basename(VUE_DATA_FILE)}")
            except Exception as e:
                ColoredOutput.print_warning(f"Kh√¥ng th·ªÉ load ho·∫∑c merge d·ªØ li·ªáu t·ª´ {os.path.basename(VUE_DATA_FILE)}: {e}")
        else:
            ColoredOutput.print_warning(f"Kh√¥ng t√¨m th·∫•y file {os.path.basename(VUE_DATA_FILE)}, ch·ªâ d√πng d·ªØ li·ªáu t·ª´ {os.path.basename(DATA_FILE)}")
        return True

    def _loading_animation(self) -> None:
        chars = "|/-\\"
        i = 0
        while self.is_loading:
            print(f"\r{Fore.YELLOW}ƒêang t·∫£i model... {chars[i % len(chars)]}{Style.RESET_ALL}", end='')
            time.sleep(0.1)
            i += 1

    def load_model(self) -> bool:
        try:
            self.is_loading = True
            t = threading.Thread(target=self._loading_animation)
            t.start()
            self.model = SentenceTransformer(MODEL_NAME)
            self.is_loading = False
            t.join()
            print(f"\r{Fore.GREEN}‚úÖ Model ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!{Style.RESET_ALL}")
            return True
        except Exception as e:
            self.is_loading = False
            ColoredOutput.print_error(f"L·ªói khi load model: {e}")
            return False

    # -------------------- Embeddings & Index --------------------
    def _compute_data_hash(self) -> str:
        sha = hashlib.sha256()
        for path in [DATA_FILE, VUE_DATA_FILE]:
            if os.path.exists(path):
                with open(path, 'rb') as f:
                    while True:
                        chunk = f.read(8192)
                        if not chunk:
                            break
                        sha.update(chunk)
        return sha.hexdigest()

    def _load_cache_meta(self) -> Optional[Dict]:
        if not os.path.exists(CACHE_META_FILE):
            return None
        try:
            with open(CACHE_META_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return None

    def _save_cache_meta(self, data_hash: str) -> None:
        try:
            with open(CACHE_META_FILE, 'w', encoding='utf-8') as f:
                json.dump({"data_hash": data_hash, "model": MODEL_NAME}, f)
        except Exception as e:
            ColoredOutput.print_warning(f"Kh√¥ng th·ªÉ l∆∞u cache meta: {e}")

    def build_enhanced_embeddings(self) -> Tuple[np.ndarray, faiss.Index, List[int]]:
        texts: List[str] = []
        ids: List[int] = []
        for idx, ng in enumerate(self.nganhs):
            components: List[str] = []
            if ng.get('nganh'):
                components.append(f"T√™n ng√†nh: {ng['nganh']}")
            if ng.get('ma_nganh'):
                components.append(f"M√£ ng√†nh: {ng['ma_nganh']}")
            if ng.get('mo_ta'):
                components.append(f"M√¥ t·∫£: {ng['mo_ta']}")
            if ng.get('khoa'):
                components.append(f"Thu·ªôc khoa: {ng['khoa']}")
            if ng.get('chi_tieu'):
                components.append(f"Ch·ªâ ti√™u tuy·ªÉn sinh: {ng['chi_tieu']} sinh vi√™n")
            alias_list: List[str] = []
            for alias, ma_nganh in ALIAS_MAP.items():
                if ng.get('ma_nganh') == ma_nganh:
                    alias_list.append(alias)
            if alias_list:
                components.append(f"T√™n g·ªçi kh√°c: {', '.join(alias_list)}")
            if ng.get('diem_chuan'):
                try:
                    latest = max(
                        [d for d in ng['diem_chuan'] if d.get('nam') is not None and d.get('diem') is not None],
                        key=lambda d: int(str(d.get('nam'))[:4])
                    )
                    components.append(f"ƒêi·ªÉm chu·∫©n g·∫ßn nh·∫•t: {latest.get('diem', '')} nƒÉm {latest.get('nam', '')}")
                except Exception:
                    pass
            texts.append(". ".join(components))
            ids.append(idx)
        # Encode
        embeddings = self.model.encode(texts, show_progress_bar=True, normalize_embeddings=True)
        embeddings = np.array(embeddings, dtype=np.float32)
        if embeddings.ndim == 1:
            embeddings = embeddings.reshape(1, -1)
        index = faiss.IndexFlatIP(embeddings.shape[1])
        index.add(embeddings)
        return embeddings, index, ids

    def ensure_index(self) -> bool:
        data_hash = self._compute_data_hash()
        meta = self._load_cache_meta()
        cache_ok = (
            os.path.exists(EMBEDDING_FILE) and os.path.exists(INDEX_FILE) and os.path.exists(ID_FILE)
            and meta is not None and meta.get('data_hash') == data_hash and meta.get('model') == MODEL_NAME
        )
        try:
            if cache_ok:
                self.embeddings = np.load(EMBEDDING_FILE)
                self.index = faiss.read_index(INDEX_FILE)
                with open(ID_FILE, 'r', encoding='utf-8') as f:
                    self.ids = json.load(f)
                ColoredOutput.print_info("ƒê√£ load index t·ª´ cache")
                return True
        except Exception as e:
            ColoredOutput.print_warning(f"L·ªói khi load cache, t·∫°o m·ªõi: {e}")
        ColoredOutput.print_info("ƒêang t·∫°o embeddings v√† index...")
        self.embeddings, self.index, self.ids = self.build_enhanced_embeddings()
        try:
            np.save(EMBEDDING_FILE, self.embeddings)
            faiss.write_index(self.index, INDEX_FILE)
            with open(ID_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.ids, f)
            self._save_cache_meta(data_hash)
            ColoredOutput.print_success("ƒê√£ l∆∞u cache th√†nh c√¥ng")
        except Exception as e:
            ColoredOutput.print_warning(f"Kh√¥ng th·ªÉ l∆∞u cache: {e}")
        return True

    # -------------------- Retrieval / Matching --------------------
    def smart_keyword_match(self, question: str) -> Optional[Dict]:
        q_lower = question.lower()
        q_no_accent = SmartMatcher.remove_accents(q_lower)
        for alias, ma_nganh in ALIAS_MAP.items():
            if alias in q_no_accent:
                for ng in self.nganhs:
                    if ng.get('ma_nganh') == ma_nganh:
                        return ng
        for ng in self.nganhs:
            if ng.get('ma_nganh') and ng.get('ma_nganh') in question:
                return ng
        for ng in self.nganhs:
            if ng.get('nganh'):
                nganh_no_accent = SmartMatcher.remove_accents(ng['nganh'])
                if nganh_no_accent in q_no_accent:
                    return ng
        # Keywords in description
        keywords_found: List[Tuple[Dict, int]] = []
        words = [w for w in q_no_accent.split() if len(w) > 3]
        for ng in self.nganhs:
            mo_ta = ng.get('mo_ta')
            if mo_ta:
                mo_ta_no = SmartMatcher.remove_accents(mo_ta)
                count = sum(1 for w in words if w in mo_ta_no)
                if count > 0:
                    keywords_found.append((ng, count))
        if keywords_found:
            keywords_found.sort(key=lambda x: x[1], reverse=True)
            return keywords_found[0][0]
        return None

    def semantic_search(self, question: str, top_k: int = TOP_K) -> List[Tuple[Dict, float]]:
        q_emb = self.model.encode([question], normalize_embeddings=True)
        q_emb = np.array(q_emb).astype('float32')
        if q_emb.ndim == 1:
            q_emb = np.expand_dims(q_emb, 0)
        D, I = self.index.search(q_emb, top_k)
        results: List[Tuple[Dict, float]] = []
        for i, score in zip(I[0], D[0]):
            if score >= MIN_SIMILARITY_SCORE:
                results.append((self.nganhs[self.ids[i]], float(score)))
        return results

    def filter_by_criteria(self, nganhs: List[Dict], question: str) -> List[Dict]:
        year = SmartMatcher.extract_year(question)
        min_score, max_score = SmartMatcher.extract_score_range(question)
        admission_method = SmartMatcher.extract_admission_method(question)
        filtered: List[Dict] = []
        for ng in nganhs:
            ds = ng.get('diem_chuan') or []
            if year:
                ds = [dc for dc in ds if str(dc.get('nam')) == year]
                if not ds:
                    continue
            if admission_method:
                ds = SmartMatcher.filter_by_admission_method(ds, admission_method)
                if not ds:
                    continue
            if min_score is not None or max_score is not None:
                scores: List[float] = []
                for dc in ds:
                    try:
                        scores.append(float(dc.get('diem')))
                    except Exception:
                        pass
                if not scores:
                    continue
                if min_score is not None and all(s < min_score for s in scores):
                    continue
                if max_score is not None and all(s > max_score for s in scores):
                    continue
            filtered.append(ng)
        return filtered

    # -------------------- Answer generation --------------------
    def generate_smart_answer(self, question: str, ng: Dict, score: float = 1.0) -> str:
        q_lower = question.lower()
        year = SmartMatcher.extract_year(question)
        year_range = SmartMatcher.extract_year_range(question)
        method = SmartMatcher.extract_admission_method(question)
        if any(kw in q_lower for kw in ["ph√¢n t√≠ch", "ƒë√°nh gi√°", "so s√°nh", "xu h∆∞·ªõng", "bi·∫øn ƒë·ªông"]):
            if year_range:
                start_y, end_y = year_range
                return self._analyze_score_trend_range(ng, start_y, end_y)
            return self._analyze_score_trend(ng, year)
        if any(kw in q_lower for kw in ["ƒëi·ªÉm chu·∫©n", "ƒëi·ªÉm", "benchmark"]):
            return self._get_admission_scores(ng, year, method)
        if any(kw in q_lower for kw in ["ƒëi·ªÉm s√†n", "t·ªëi thi·ªÉu", "minimum"]):
            return self._get_minimum_scores(ng, year)
        if any(kw in q_lower for kw in ["ch·ªâ ti√™u", "quota", "s·ªë l∆∞·ª£ng"]):
            return self._get_quota_info(ng)
        if any(kw in q_lower for kw in ["khoa", "faculty", "department"]):
            return self._get_faculty_info(ng)
        if any(kw in q_lower for kw in ["m√¥ t·∫£", "gi·ªõi thi·ªáu", "h·ªçc g√¨", "ra tr∆∞·ªùng l√†m g√¨"]):
            return self._get_program_description(ng)
        return self._get_comprehensive_info(ng)

    def _analyze_score_trend(self, ng: Dict, year: Optional[str] = None) -> str:
        if not ng.get('diem_chuan'):
            return f"üìä {ng.get('nganh')}: Kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªÉm chu·∫©n ƒë·ªÉ ph√¢n t√≠ch xu h∆∞·ªõng."
        if year:
            year_scores = {str(dc.get('nam')): float(dc.get('diem')) for dc in ng['diem_chuan'] if str(dc.get('nam')) == year and dc.get('diem')}
            if not year_scores:
                return f"üìä {ng.get('nganh')}: Kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªÉm chu·∫©n nƒÉm {year}."
            result = f"üìä ƒêi·ªÉm chu·∫©n {ng.get('nganh')} nƒÉm {year}\n"
            for y, s in year_scores.items():
                result += f" ‚Ä¢ NƒÉm {y}: {s:.2f} ƒëi·ªÉm\n"
            return result
        year_scores: Dict[int, float] = {}
        for dc in ng['diem_chuan']:
            y = dc.get('nam')
            score = dc.get('diem')
            if y and score is not None:
                try:
                    s = float(score)
                except Exception:
                    continue
                if y not in year_scores or s > year_scores[y]:
                    year_scores[y] = s
        if len(year_scores) < 2:
            return f"üìä {ng.get('nganh')}: C·∫ßn √≠t nh·∫•t 2 nƒÉm d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch xu h∆∞·ªõng."
        years = sorted(year_scores.keys())
        scores = [year_scores[y] for y in years]
        result = f"\nüìà Ph√¢n t√≠ch xu h∆∞·ªõng ƒëi·ªÉm chu·∫©n ng√†nh {ng.get('nganh')}\n"
        result += f"{'NƒÉm':<8}{'ƒêi·ªÉm':<12}{'Ghi ch√∫'}\n"
        result += "-"*32 + "\n"
        for idx, y in enumerate(years):
            note = ""
            if idx > 0:
                d = scores[idx] - scores[idx-1]
                note = f"‚Üë +{d:.2f}" if d > 0 else (f"‚Üì {d:.2f}" if d < 0 else "=")
            result += f"{y:<8}{scores[idx]:<12.2f}{note}\n"
        avg_score = sum(scores) / len(scores)
        result += f"\n‚ú® Trung b√¨nh: {avg_score:.2f} | Cao nh·∫•t: {max(scores):.2f} | Th·∫•p nh·∫•t: {min(scores):.2f} | Bi√™n ƒë·ªô: {max(scores)-min(scores):.2f}\n"
        if scores[-1] > scores[0]:
            result += "- üì¢ Xu h∆∞·ªõng tƒÉng, c·∫ßn chu·∫©n b·ªã t·ªët h∆°n."
        elif scores[-1] < scores[0]:
            result += "- üì¢ Xu h∆∞·ªõng gi·∫£m, c∆° h·ªôi c√≥ th·ªÉ cao h∆°n."
        else:
            result += "- üì¢ ·ªîn ƒë·ªãnh qua c√°c nƒÉm."
        return result

    def _analyze_score_trend_range(self, ng: Dict, start_year: str, end_year: str) -> str:
        if not ng.get('diem_chuan'):
            return f"üìä {ng.get('nganh')}: Kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªÉm chu·∫©n ƒë·ªÉ ph√¢n t√≠ch xu h∆∞·ªõng."
        try:
            s_year, e_year = int(start_year), int(end_year)
            if s_year > e_year:
                s_year, e_year = e_year, s_year
        except Exception:
            return "üìä Kho·∫£ng nƒÉm kh√¥ng h·ª£p l·ªá."
        year_scores: Dict[int, float] = {}
        for dc in ng['diem_chuan']:
            y = dc.get('nam')
            score = dc.get('diem')
            if isinstance(y, int) and s_year <= y <= e_year and score is not None:
                try:
                    s = float(score)
                except Exception:
                    continue
                if y not in year_scores or s > year_scores[y]:
                    year_scores[y] = s
        if not year_scores:
            return f"üìä {ng.get('nganh')}: Kh√¥ng c√≥ d·ªØ li·ªáu trong giai ƒëo·∫°n {s_year}-{e_year}."
        years = sorted(year_scores.keys())
        scores = [year_scores[y] for y in years]
        result = f"üìà Xu h∆∞·ªõng ƒëi·ªÉm chu·∫©n {ng.get('nganh')} ({s_year}‚Äì{e_year})\n"
        for idx, y in enumerate(years):
            note = ""
            if idx > 0:
                d = scores[idx] - scores[idx-1]
                note = f" ‚Üë +{d:.2f}" if d > 0 else (f" ‚Üì {d:.2f}" if d < 0 else " =")
            result += f"- {y}: {scores[idx]:.2f}{note}\n"
        if len(scores) >= 2:
            delta = scores[-1] - scores[0]
            trend_text = "tƒÉng" if delta > 0.25 else ("gi·∫£m" if delta < -0.25 else "·ªïn ƒë·ªãnh")
            result += f"T√≥m t·∫Øt: {trend_text} ({scores[0]:.2f} ‚Üí {scores[-1]:.2f}, Œî {delta:.2f})."
        return result

    def _get_admission_scores(self, ng: Dict, year: Optional[str] = None, method: Optional[str] = None) -> str:
        if not ng.get('diem_chuan'):
            return f"üìö {ng.get('nganh')}: Ch∆∞a c√≥ d·ªØ li·ªáu ƒëi·ªÉm chu·∫©n."
        scores = ng['diem_chuan']
        if year:
            scores = [s for s in scores if str(s.get('nam')) == year]
            if not scores:
                return f"üìö {ng.get('nganh')}: Kh√¥ng c√≥ ƒëi·ªÉm chu·∫©n nƒÉm {year}."
        if method:
            filtered = SmartMatcher.filter_by_admission_method(scores, method)
            if filtered:
                s = filtered[0]
                return f"üìö {ng.get('nganh')} {f'nƒÉm {year} ' if year else ''}({s.get('phuong_thuc','')}): {s.get('diem','N/A')} ƒëi·ªÉm"
            return f"üìö {ng.get('nganh')}: Kh√¥ng c√≥ ƒëi·ªÉm chu·∫©n{f' nƒÉm {year}' if year else ''} cho ph∆∞∆°ng th·ª©c {method}."
        result = f"üìö {ng.get('nganh')}"
        if year:
            result += f" nƒÉm {year}"
        result += ":\n"
        order = ["ƒëi·ªÉm thi", "thpt", "t·ªët nghi·ªáp", "h·ªçc b·∫°"]
        def weight(item: Dict) -> int:
            pt = str(item.get('phuong_thuc','')).lower()
            for idx, key in enumerate(order):
                if key in pt:
                    return idx
            return len(order)
        sorted_scores = sorted(scores, key=weight)
        for s in sorted_scores[:2]:
            result += f"‚Ä¢ {s.get('phuong_thuc','')}: {s.get('diem','N/A')} ƒëi·ªÉm\n"
        if len(sorted_scores) > 2:
            result += f"... v√† {len(sorted_scores) - 2} ph∆∞∆°ng th·ª©c kh√°c"
        return result

    def _get_minimum_scores(self, ng: Dict, year: Optional[str] = None) -> str:
        tieu_chi = ng.get('tieu_chi_xet_tuyen') or []
        diem_san_data = []
        for tc in tieu_chi:
            if tc.get('diem_toi_thieu') is not None:
                diem_san_data.append({'nam': tc.get('nam'), 'diem_san': tc.get('diem_toi_thieu')})
        if not diem_san_data:
            return f"üìù {ng.get('nganh')}: Kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªÉm s√†n c·ª• th·ªÉ."
        if year:
            diem_san_data = [d for d in diem_san_data if str(d.get('nam')) == year]
            if not diem_san_data:
                return f"üìù {ng.get('nganh')}: Kh√¥ng c√≥ ƒëi·ªÉm s√†n nƒÉm {year}."
        result = f"üìù ƒêi·ªÉm s√†n {ng.get('nganh')}\n"
        for d in sorted(diem_san_data, key=lambda x: x.get('nam', 0), reverse=True):
            result += f" ‚Ä¢ NƒÉm {d.get('nam', 'N/A')}: {d.get('diem_san', 'N/A')} ƒëi·ªÉm\n"
        return result

    def _get_quota_info(self, ng: Dict) -> str:
        chi_tieu = ng.get('chi_tieu')
        if not chi_tieu and ng.get('mo_ta'):
            match = re.search(r'[Cc]h·ªâ ti√™u: ?(\d+)', ng['mo_ta'])
            if match:
                chi_tieu = match.group(1)
        if chi_tieu:
            nam_gan_nhat = None
            if ng.get('diem_chuan'):
                try:
                    nam_gan_nhat = max(ng['diem_chuan'], key=lambda d: int(str(d.get('nam'))[:4])).get('nam')
                except Exception:
                    nam_gan_nhat = None
            return f"üéØ {ng.get('nganh')}: {chi_tieu} sinh vi√™n" + (f" (nƒÉm {nam_gan_nhat})" if nam_gan_nhat else "")
        return f"üéØ {ng.get('nganh')}: Ch∆∞a c√≥ th√¥ng tin ch·ªâ ti√™u"

    def _get_faculty_info(self, ng: Dict) -> str:
        result = f"üè´ Th√¥ng tin Khoa - {ng.get('nganh')}\n"
        khoa_info = ng.get('khoa')
        if khoa_info:
            if isinstance(khoa_info, dict):
                result += f" ‚Ä¢ Thu·ªôc khoa: {khoa_info.get('tenKhoa', 'N/A')}\n"
            else:
                result += f" ‚Ä¢ Thu·ªôc khoa: {khoa_info}\n"
        else:
            result += " ‚Ä¢ Ch∆∞a c√≥ th√¥ng tin khoa c·ª• th·ªÉ\n"
        result += f" ‚Ä¢ M√£ ng√†nh: {ng.get('ma_nganh', 'N/A')}\n"
        if ng.get('mo_ta'):
            result += f" ‚Ä¢ M√¥ t·∫£: {str(ng.get('mo_ta'))[:200]}...\n"
        return result

    def _get_program_description(self, ng: Dict) -> str:
        result = f"üìñ Gi·ªõi thi·ªáu ng√†nh {ng.get('nganh') or ng.get('tenNganh')}\n"
        mo_ta = ng.get('gioiThieu') or ng.get('mo_ta')
        if mo_ta:
            if len(mo_ta) > 350:
                cut_idx = mo_ta.rfind('.', 0, 350)
                mo_ta = mo_ta[:cut_idx+1] if cut_idx != -1 else mo_ta[:350] + '...'
            result += f"üéì {mo_ta}\n"
        result += f"üìã Th√¥ng tin c∆° b·∫£n:\n"
        result += f"   ‚Ä¢ M√£ ng√†nh: {ng.get('ma_nganh', ng.get('maNganh', 'N/A'))}\n"
        if ng.get('khoa'):
            if isinstance(ng['khoa'], dict):
                result += f"   ‚Ä¢ Khoa: {ng['khoa'].get('tenKhoa', ng['khoa'])}\n"
            else:
                result += f"   ‚Ä¢ Khoa: {ng['khoa']}\n"
        if ng.get('thoiGianDaoTao'):
            result += f"   ‚Ä¢ Th·ªùi gian ƒë√†o t·∫°o: {ng.get('thoiGianDaoTao')}\n"
        if ng.get('bangCap'):
            result += f"   ‚Ä¢ B·∫±ng c·∫•p: {ng.get('bangCap')}\n"
        return result

    def _get_comprehensive_info(self, ng: Dict) -> str:
        result = f"üéì Th√¥ng tin t·ªïng h·ª£p - {ng.get('nganh')}\n\n"
        result += f"üìã Th√¥ng tin c∆° b·∫£n:\n"
        result += f" ‚Ä¢ T√™n ng√†nh: {ng.get('nganh', 'N/A')}\n"
        result += f" ‚Ä¢ M√£ ng√†nh: {ng.get('ma_nganh', 'N/A')}\n"
        if ng.get('khoa'):
            if isinstance(ng['khoa'], dict):
                result += f" ‚Ä¢ Thu·ªôc khoa: {ng['khoa'].get('tenKhoa', 'N/A')}\n"
            else:
                result += f" ‚Ä¢ Thu·ªôc khoa: {ng['khoa']}\n"
        if ng.get('chi_tieu'):
            result += f" ‚Ä¢ Ch·ªâ ti√™u: {ng.get('chi_tieu')} sinh vi√™n\n"
        if ng.get('diem_chuan'):
            try:
                latest = max(ng['diem_chuan'], key=lambda d: int(str(d.get('nam'))[:4]))
                result += f"\nüèÜ Tuy·ªÉn sinh:\n"
                result += f" ‚Ä¢ ƒêi·ªÉm chu·∫©n g·∫ßn nh·∫•t: {latest.get('diem', 'N/A')} ƒëi·ªÉm\n"
                result += f" ‚Ä¢ NƒÉm: {latest.get('nam', 'N/A')}\n"
                result += f" ‚Ä¢ Ph∆∞∆°ng th·ª©c: {latest.get('phuong_thuc', 'Ch√≠nh quy')}\n"
            except Exception:
                pass
        if ng.get('mo_ta'):
            description = str(ng.get('mo_ta'))
            if len(description) > 150:
                description = description[:150] + "..."
            result += f"\nüìù M√¥ t·∫£: {description}\n"
        return result

    # -------------------- LLM --------------------
    def check_llm_connection(self) -> bool:
        try:
            r = requests.get("http://localhost:11434/api/version", timeout=3)
            return r.status_code == 200
        except Exception:
            return False

    def generate_llm_response(self, question: str, top_nganhs: List[Dict]) -> str:
        if not self.check_llm_connection():
            return "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Ollama server. Vui l√≤ng ch·∫°y 'ollama serve' ho·∫∑c 'ollama run mistral' tr∆∞·ªõc."
        context_parts: List[str] = []
        for ng in top_nganhs:
            part = f"Ng√†nh: {ng.get('nganh','')}\nM√£: {ng.get('ma_nganh','')}\nKhoa: {ng.get('khoa','')}\n"
            if ng.get('mo_ta'):
                part += f"M√¥ t·∫£: {ng.get('mo_ta','')}\n"
            if ng.get('chi_tieu'):
                part += f"Ch·ªâ ti√™u: {ng.get('chi_tieu')} sinh vi√™n\n"
            if ng.get('diem_chuan'):
                try:
                    latest = max(ng['diem_chuan'], key=lambda d: int(str(d.get('nam'))[:4]))
                    part += f"ƒêi·ªÉm chu·∫©n: {latest.get('diem','')} ({latest.get('nam','')})\n"
                except Exception:
                    pass
            context_parts.append(part)
        context = "\n---\n".join(context_parts)
        messages = [
            {
                "role": "system",
                "content": (
                    "B·∫°n l√† t∆∞ v·∫•n vi√™n tuy·ªÉn sinh ƒë·∫°i h·ªçc th√¢n thi·ªán. H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn, ch√≠nh x√°c, "
                    "ch·ªâ d·ª±a v√†o th√¥ng tin ng√†nh b√™n d∆∞·ªõi. N·∫øu kh√¥ng c√≥ th√¥ng tin, h√£y n√≥i 'Kh√¥ng c√≥ d·ªØ li·ªáu'.\n\n" 
                    + context
                ),
            }
        ]
        history = self.memory.get_context_for_llm()
        for turn in history[-3:]:
            messages.append({"role": "user", "content": turn["question"]})
            messages.append({"role": "assistant", "content": turn["answer"]})
        messages.append({"role": "user", "content": question})
        try:
            response = requests.post(
                "http://localhost:11434/api/chat",
                json={
                    "model": "mistral",
                    "messages": messages,
                    "stream": False,
                    "options": {"temperature": 0.7, "top_p": 0.9, "max_tokens": 500},
                },
                timeout=LLM_TIMEOUT,
            )
            if response.status_code == 200:
                data = response.json()
                content = data.get("message", {}).get("content", "").strip()
                return content or "ü§ñ Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p ƒë·ªÉ tr·∫£ l·ªùi."
            return f"‚ùå L·ªói LLM: HTTP {response.status_code}"
        except requests.exceptions.Timeout:
            return "‚è∞ Timeout: LLM ph·∫£n h·ªìi qu√° l√¢u, vui l√≤ng th·ª≠ l·∫°i."
        except Exception as e:
            return f"‚ùå L·ªói LLM: {e}"

    # -------------------- Intents & Flow --------------------
    def is_question_vague(self, question: str) -> bool:
        keywords = [
            "ng√†nh", "ƒëi·ªÉm", "m√£ ng√†nh", "t√™n ng√†nh", "khoa", "ch·ªâ ti√™u",
            "nƒÉm", "m√¥ t·∫£", "tuy·ªÉn sinh", "ƒë·∫°i h·ªçc", "cntt", "it", "khmt",
        ]
        q = SmartMatcher.remove_accents(question.lower())
        if len(question.strip()) < 5:
            return True
        if not any(k in q for k in keywords):
            return True
        if len(question.split()) <= 2:
            return True
        return False

    def suggest_questions(self) -> List[str]:
        return [
            "ƒêi·ªÉm chu·∫©n CNTT 2023",
            "Ch·ªâ ti√™u ng√†nh Khoa h·ªçc m√°y t√≠nh",
            "So s√°nh ƒëi·ªÉm chu·∫©n CNTT v√† KTPM",
            "Ph√¢n t√≠ch xu h∆∞·ªõng ƒëi·ªÉm ng√†nh AI",
            "Ng√†nh n√†o thu·ªôc khoa CNTT?",
            "M√¥ t·∫£ ng√†nh M·∫°ng m√°y t√≠nh",
            "ƒêi·ªÉm s√†n c√°c ng√†nh IT 2023",
        ]

    def print_welcome(self) -> None:
        ColoredOutput.print_header("üéì CHATBOT T∆Ø V·∫§N TUY·ªÇN SINH TH√îNG MINH ü§ñ")
        print(f"{Fore.CYAN}Ch√†o m·ª´ng b·∫°n! T√¥i gi√∫p tra c·ª©u ng√†nh h·ªçc, ƒëi·ªÉm chu·∫©n, ch·ªâ ti√™u...{Style.RESET_ALL}\n")
        print(f"{Fore.YELLOW}üí° T√≠nh nƒÉng:")
        for f in [
            "üîç T√¨m ki·∫øm th√¥ng minh (t·ª´ kh√≥a + ng·ªØ nghƒ©a)",
            "üìä Ph√¢n t√≠ch xu h∆∞·ªõng ƒëi·ªÉm chu·∫©n",
            "ü§ñ Tr·∫£ l·ªùi t·ª± nhi√™n b·∫±ng AI",
            "üíæ Nh·ªõ ng·ªØ c·∫£nh h·ªôi tho·∫°i",
            "üéØ L·ªçc theo nƒÉm, ph∆∞∆°ng th·ª©c, kho·∫£ng ƒëi·ªÉm",
            "‚ö° Cache th√¥ng minh",
        ]:
            print(f"   {f}")
        print(f"\n{Fore.GREEN}üìù L·ªánh: \n   ‚Ä¢ help\n   ‚Ä¢ suggest\n   ‚Ä¢ reset\n   ‚Ä¢ stats\n   ‚Ä¢ exit{Style.RESET_ALL}")

    def print_help(self) -> None:
        print(
            f"""
{Fore.CYAN}üìö H∆Ø·ªöNG D·∫™N{Style.RESET_ALL}
- D√πng t√™n ng√†nh, m√£ ng√†nh ho·∫∑c alias (VD: CNTT, 7480201)
- Ch·ªâ ƒë·ªãnh nƒÉm (VD: ƒëi·ªÉm chu·∫©n CNTT 2023)
- Kho·∫£ng ƒëi·ªÉm (VD: ng√†nh n√†o d∆∞·ªõi 20 ƒëi·ªÉm)
- Ph√¢n t√≠ch xu h∆∞·ªõng (VD: ph√¢n t√≠ch ƒëi·ªÉm AI 2021-2023)
"""
        )

    def print_stats(self) -> None:
        print(
            f"""
{Fore.CYAN}üìà TH·ªêNG K√ä{Style.RESET_ALL}
‚Ä¢ T·ªïng s·ªë ng√†nh: {len(self.nganhs)}
‚Ä¢ S·ªë ng√†nh c√≥ ƒëi·ªÉm chu·∫©n: {len([ng for ng in self.nganhs if ng.get('diem_chuan')])}
‚Ä¢ Cache embeddings: {'‚úÖ' if os.path.exists(EMBEDDING_FILE) else '‚ùå'}
‚Ä¢ Cache FAISS index: {'‚úÖ' if os.path.exists(INDEX_FILE) else '‚ùå'}
‚Ä¢ Model: {MODEL_NAME}
‚Ä¢ LLM: {'üü¢ Connected' if self.check_llm_connection() else 'üî¥ Disconnected'}
"""
        )

    def extract_multiple_majors(self, question: str, top_k: int = 5) -> List[Dict]:
        found: List[Dict] = []
        used: set = set()
        q_noaccent = SmartMatcher.remove_accents(question.lower())
        for alias, ma in ALIAS_MAP.items():
            if alias in q_noaccent and ma not in used:
                for ng in self.nganhs:
                    if ng.get('ma_nganh') == ma:
                        found.append(ng)
                        used.add(ma)
                        if len(found) == 2:
                            return found
        if len(found) < 2:
            for ng, _score in self.semantic_search(question, top_k=top_k):
                ma = ng.get('ma_nganh')
                if ma and ma not in used:
                    found.append(ng)
                    used.add(ma)
                    if len(found) == 2:
                        break
        return found

    def is_reference_to_previous_major(self, question: str) -> bool:
        q = question.lower()
        return any(kw in q for kw in ["ng√†nh n√†y", "ng√†nh ƒë√≥", "ng√†nh tr√™n", "ng√†nh v·ª´a h·ªèi", "ng√†nh v·ª´a r·ªìi"])

    def is_career_question(self, question: str) -> bool:
        q = question.lower()
        return any(kw in q for kw in ["v·ªã tr√≠ vi·ªác l√†m", "ngh·ªÅ nghi·ªáp", "job", "career", "ra tr∆∞·ªùng l√†m g√¨", "l√†m g√¨", "c∆° h·ªôi vi·ªác l√†m"])

    def is_workplace_question(self, question: str) -> bool:
        q = question.lower()
        return any(kw in q for kw in ["n∆°i l√†m vi·ªác", "l√†m ·ªü ƒë√¢u", "workplace", "c√¥ng ty", "doanh nghi·ªáp", "l√†m vi·ªác ·ªü ƒë√¢u"])

    def is_quota_question(self, question: str) -> bool:
        q = question.lower()
        return any(kw in q for kw in ["ch·ªâ ti√™u", "quota", "s·ªë l∆∞·ª£ng tuy·ªÉn", "tuy·ªÉn sinh bao nhi√™u", "bao nhi√™u ch·ªâ ti√™u"])

    def _list_faculty_programs(self, target_khoa: str) -> str:
        matching: List[Dict] = []
        for ng in self.nganhs:
            khoa_info = ng.get('khoa')
            if not khoa_info:
                continue
            khoa_str = str(khoa_info.get('tenKhoa', '')) if isinstance(khoa_info, dict) else str(khoa_info)
            ks = khoa_str.lower()
            if target_khoa in ks or any(kw in ks for kw in target_khoa.split()):
                matching.append(ng)
        if matching:
            result = f"üè´ Ng√†nh thu·ªôc khoa {target_khoa.title()}:\n\n"
            for ng in matching[:6]:
                result += f"üéì {ng.get('nganh','N/A')} ({ng.get('ma_nganh','N/A')})\n"
            if len(matching) > 6:
                result += f"\n... v√† {len(matching) - 6} ng√†nh kh√°c"
            return result
        return f"‚ùå Kh√¥ng t√¨m th·∫•y ng√†nh n√†o thu·ªôc khoa {target_khoa.title()}"

    def process_question(self, question: str) -> str:
        self.last_question = question
        # Early vague detection
        if self.is_question_vague(question):
            sugg = self.suggest_questions()
            return "M√¨nh c·∫ßn th√™m chi ti·∫øt (t√™n/m√£ ng√†nh, nƒÉm...). V√≠ d·ª•:\n- " + "\n- ".join(sugg[:3])
        q_lower = question.lower()
        year = SmartMatcher.extract_year(question)
        min_score, max_score = SmartMatcher.extract_score_range(question)
        # Faculty listing intent
        if any(kw in q_lower for kw in ["thu·ªôc khoa", "ng√†nh n√†o thu·ªôc khoa", "khoa n√†o c√≥ ng√†nh"]):
            khoa_keywords = ["c√¥ng ngh·ªá th√¥ng tin", "cntt", "y khoa", "y t·∫ø", "kinh t·∫ø", "lu·∫≠t", "s∆∞ ph·∫°m", "n√¥ng nghi·ªáp"]
            for keyword in khoa_keywords:
                if keyword in q_lower:
                    return self._list_faculty_programs(keyword)
        # Below X points
        if max_score is not None:
            matching: List[Dict] = []
            for ng in self.nganhs:
                ds = ng.get('diem_chuan') or []
                if year:
                    ds = [dc for dc in ds if str(dc.get('nam')) == year]
                if not ds:
                    continue
                for dc in ds:
                    try:
                        score_val = float(dc.get('diem', 0))
                    except Exception:
                        continue
                    if score_val < max_score:
                        matching.append({
                            'nganh': ng.get('nganh'),
                            'score': score_val,
                            'year': dc.get('nam'),
                            'method': dc.get('phuong_thuc', 'Kh√¥ng r√µ')
                        })
                        break
            if matching:
                matching.sort(key=lambda x: x['score'])
                result = f"üìä Ng√†nh c√≥ ƒëi·ªÉm chu·∫©n d∆∞·ªõi {max_score} ƒëi·ªÉm" + (f" nƒÉm {year}" if year else "") + ":\n\n"
                for item in matching[:8]:
                    result += f"üéì {item['nganh']}: {item['score']:.1f} ƒëi·ªÉm\n"
                if len(matching) > 8:
                    result += f"\n... v√† {len(matching) - 8} ng√†nh kh√°c"
                return result
            return f"‚ùå Kh√¥ng t√¨m th·∫•y ng√†nh n√†o c√≥ ƒëi·ªÉm chu·∫©n d∆∞·ªõi {max_score} ƒëi·ªÉm"
        # Above X points
        if min_score is not None:
            admission_method = SmartMatcher.extract_admission_method(question)
            matching: List[Dict] = []
            for ng in self.nganhs:
                ds = ng.get('diem_chuan') or []
                if year:
                    ds = [dc for dc in ds if str(dc.get('nam')) == year]
                if not ds:
                    continue
                if admission_method:
                    ds = SmartMatcher.filter_by_admission_method(ds, admission_method)
                    if not ds:
                        continue
                for dc in ds:
                    try:
                        score_val = float(dc.get('diem', 0))
                    except Exception:
                        continue
                    if score_val >= min_score:
                        matching.append({
                            'nganh': ng.get('nganh'),
                            'score': score_val,
                            'year': dc.get('nam'),
                            'method': dc.get('phuong_thuc', 'Kh√¥ng r√µ')
                        })
                        break
            if matching:
                matching.sort(key=lambda x: x['score'], reverse=True)
                result = f"üìä Ng√†nh c√≥ ƒëi·ªÉm chu·∫©n tr√™n {min_score} ƒëi·ªÉm" + (f" nƒÉm {year}" if year else "")
                if admission_method:
                    result += f" ({admission_method})"
                result += ":\n\n"
                for item in matching[:8]:
                    result += f"üéì {item['nganh']}: {item['score']:.1f} ƒëi·ªÉm\n"
                if len(matching) > 8:
                    result += f"\n... v√† {len(matching) - 8} ng√†nh kh√°c"
                return result
            method_text = f" theo ph∆∞∆°ng th·ª©c {admission_method}" if admission_method else ""
            return f"‚ùå Kh√¥ng t√¨m th·∫•y ng√†nh n√†o c√≥ ƒëi·ªÉm chu·∫©n tr√™n {min_score} ƒëi·ªÉm{method_text}"
        # Follow-up intent to previous major
        if self.is_reference_to_previous_major(question) and self.memory.last_nganh_context:
            ng = self.memory.last_nganh_context
            if self.is_career_question(question) and ng.get('viTriViecLam'):
                result = f"üíº V·ªã tr√≠ vi·ªác l√†m ti√™u bi·ªÉu ng√†nh {ng.get('nganh', ng.get('tenNganh'))}:\n"
                for vt in ng['viTriViecLam']:
                    result += f"   - {vt}\n"
                return result
            if self.is_workplace_question(question) and ng.get('noiLamViec'):
                result = f"üè¢ N∆°i l√†m vi·ªác ph·ªï bi·∫øn ng√†nh {ng.get('nganh', ng.get('tenNganh'))}:\n"
                for nlv in ng['noiLamViec']:
                    result += f"   - {nlv}\n"
                return result
            if self.is_quota_question(question):
                return self._get_quota_info(ng)
            return self.generate_smart_answer(question, ng, 1.0)
        # Keyword match intent
        matched_nganh = self.smart_keyword_match(question)
        if matched_nganh:
            if self.is_career_question(question) and matched_nganh.get('viTriViecLam'):
                self.memory.last_nganh_context = matched_nganh
                result = f"üíº V·ªã tr√≠ vi·ªác l√†m ti√™u bi·ªÉu ng√†nh {matched_nganh.get('nganh', matched_nganh.get('tenNganh'))}:\n"
                for vt in matched_nganh['viTriViecLam']:
                    result += f"   - {vt}\n"
                return result
            if self.is_workplace_question(question) and matched_nganh.get('noiLamViec'):
                self.memory.last_nganh_context = matched_nganh
                result = f"üè¢ N∆°i l√†m vi·ªác ph·ªï bi·∫øn ng√†nh {matched_nganh.get('nganh', matched_nganh.get('tenNganh'))}:\n"
                for nlv in matched_nganh['noiLamViec']:
                    result += f"   - {nlv}\n"
                return result
            if self.is_quota_question(question):
                self.memory.last_nganh_context = matched_nganh
                return self._get_quota_info(matched_nganh)
            ColoredOutput.print_info(f"T√¨m th·∫•y ng√†nh: {matched_nganh.get('nganh')} (keyword match)")
            self.memory.last_nganh_context = matched_nganh
            return self.generate_smart_answer(question, matched_nganh, 1.0)
        # Semantic search
        results = self.semantic_search(question, TOP_K)
        if self.is_reference_to_previous_major(question) and self.memory.last_nganh_context:
            ColoredOutput.print_info("Nh·∫≠n di·ªán c√¢u h·ªèi tham chi·∫øu ng√†nh tr∆∞·ªõc ƒë√≥.")
            return self.generate_smart_answer(question, self.memory.last_nganh_context, 1.0)
        if not results or (results and results[0][1] < 0.7 and self.memory.last_nganh_context):
            ColoredOutput.print_info("Score th·∫•p ho·∫∑c kh√¥ng t√¨m th·∫•y ng√†nh, d√πng context ng√†nh tr∆∞·ªõc ƒë√≥.")
            return self.generate_smart_answer(question, self.memory.last_nganh_context, 1.0)
        candidate_nganhs = [ng for ng, _s in results]
        filtered_nganhs = self.filter_by_criteria(candidate_nganhs, question) or candidate_nganhs
        # confident hit
        if results and results[0][1] > 0.75:
            best_nganh, score = results[0]
            if self.is_career_question(question) and best_nganh.get('viTriViecLam'):
                self.memory.last_nganh_context = best_nganh
                result = f"üíº V·ªã tr√≠ vi·ªác l√†m ti√™u bi·ªÉu ng√†nh {best_nganh.get('nganh', best_nganh.get('tenNganh'))}:\n"
                for vt in best_nganh['viTriViecLam']:
                    result += f"   - {vt}\n"
                return result
            if self.is_workplace_question(question) and best_nganh.get('noiLamViec'):
                self.memory.last_nganh_context = best_nganh
                result = f"üè¢ N∆°i l√†m vi·ªác ph·ªï bi·∫øn ng√†nh {best_nganh.get('nganh', best_nganh.get('tenNganh'))}:\n"
                for nlv in best_nganh['noiLamViec']:
                    result += f"   - {nlv}\n"
                return result
            if self.is_quota_question(question):
                self.memory.last_nganh_context = best_nganh
                return self._get_quota_info(best_nganh)
            ColoredOutput.print_info(f"T√¨m th·∫•y ng√†nh: {best_nganh.get('nganh')} (score: {score:.3f})")
            self.memory.last_nganh_context = best_nganh
            return self.generate_smart_answer(question, best_nganh, score)
        # Fallback LLM
        ColoredOutput.print_info("S·ª≠ d·ª•ng AI ƒë·ªÉ tr·∫£ l·ªùi...")
        llm_response = self.generate_llm_response(question, filtered_nganhs[:3])
        if not llm_response or "‚è∞ Timeout" in llm_response or "‚ùå" in llm_response:
            return (
                "ü§ñ Xin l·ªói, t√¥i ch∆∞a th·ªÉ tr·∫£ l·ªùi r√µ c√¢u h·ªèi n√†y. H√£y n√™u c·ª• th·ªÉ t√™n ng√†nh ho·∫∑c nƒÉm h·ªçc, "
                "ho·∫∑c th·ª≠ l·∫°i sau n·∫øu m√°y ch·ªß AI b·ªã gi√°n ƒëo·∫°n."
            )
        if len(filtered_nganhs) == 1:
            self.memory.last_nganh_context = filtered_nganhs[0]
        return llm_response

    # -------------------- CLI --------------------
    def run(self) -> None:
        self.print_welcome()
        if not self.load_data():
            return
        if not self.load_model():
            return
        if not self.ensure_index():
            return
        ColoredOutput.print_success("H·ªá th·ªëng ƒë√£ s·∫µn s√†ng! H√£y ƒë·∫∑t c√¢u h·ªèi ƒë·∫ßu ti√™n üöÄ")
        while True:
            try:
                question = input(f"\n{Fore.CYAN}‚ùì C√¢u h·ªèi: {Style.RESET_ALL}").strip()
                if not question:
                    ColoredOutput.print_warning("Vui l√≤ng nh·∫≠p c√¢u h·ªèi!")
                    continue
                q_lower = question.lower()
                if q_lower == 'exit':
                    ColoredOutput.print_info("ƒêang l∆∞u l·ªãch s·ª≠...")
                    self.memory.save_session()
                    ColoredOutput.print_success("C√°m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng! T·∫°m bi·ªát! üëã")
                    break
                if q_lower == 'reset':
                    self.memory.reset_session()
                    ColoredOutput.print_success("ƒê√£ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i!")
                    continue
                if q_lower == 'help':
                    self.print_help()
                    continue
                if q_lower == 'stats':
                    self.print_stats()
                    continue
                if q_lower == 'suggest':
                    suggestions = self.suggest_questions()
                    ColoredOutput.print_info("üí° C√¢u h·ªèi g·ª£i √Ω:")
                    for i, suggestion in enumerate(suggestions, 1):
                        print(f"   {i}. {suggestion}")
                    continue
                start_time = time.time()
                answer = self.process_question(question)
                response_time = time.time() - start_time
                ColoredOutput.print_bot_response(answer)
                if response_time > 1:
                    print(f"{Fore.LIGHTBLACK_EX}‚è±Ô∏è  Th·ªùi gian ph·∫£n h·ªìi: {response_time:.2f}s{Style.RESET_ALL}")
                self.memory.add_turn(question, answer, {"response_time": response_time})
            except KeyboardInterrupt:
                ColoredOutput.print_info("\n\nƒêang tho√°t...")
                self.memory.save_session()
                ColoredOutput.print_success("T·∫°m bi·ªát! üëã")
                break
            except Exception as e:
                ColoredOutput.print_error(f"L·ªói kh√¥ng mong mu·ªën: {e}")
                ColoredOutput.print_info("Vui l√≤ng th·ª≠ l·∫°i v·ªõi c√¢u h·ªèi kh√°c.")


def main() -> None:
    try:
        chatbot = ImprovedChatbot()
        chatbot.run()
    except Exception as e:
        ColoredOutput.print_error(f"L·ªói kh·ªüi t·∫°o chatbot: {e}")
        print("Vui l√≤ng ki·ªÉm tra:\n1. File data_chatbot.json c√≥ t·ªìn t·∫°i kh√¥ng\n2. C√°c th∆∞ vi·ªán ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a\n3. Model embedding c√≥ th·ªÉ t·∫£i ƒë∆∞·ª£c kh√¥ng")


if __name__ == "__main__":
    main()